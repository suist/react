:)



리액트란 ?
-> 라이브러리
 
Q. 라이브러리와 프레임워크의 차이점을 설명할 수 있는가 ?

#5
컴포넌트(디자인)만들기

java 안에 html이 있음.
이것이 JSX = 리액트 컴포넌트를 만들떄 사용하는 언어
규칙이 심플하다.
html  JSX
class="name" > className=""
<img src={logo}

java
render()(출력. 웹페이지 표사){
	return (
	html

import React -> 라이브러리
reactDOM 라이브러리를 웹사이트에 출력
//document object model, 웹페이지
reactNative ->모바일앱

ReactDOM, 1개의 컴포넌트 render(출력) 함

index.js


ReactDOM.render(<App/>,document.getElementById('root'));

index.html에 id='root' 로거기서 내용수정.

//따라해 봅시다

movie.js movie.css 생성
app.js 처럼 기본문 생성해줌 .css도

js>

import React,{component} from 'react';
import './Movie.css';
//컴포넌트는 무조건 render로 출력
class Movie extends Componet{
	render(){
	return(
	<h1>sdf</h1>
	
	)
	}
}
export default Movie;



app.js>

import Movie from '/.Movie';

class App extends Component {
	render() {
	return (
	<div className="App">
<movie />

 #2-3. Lists with .map
배열 로 만들기
const movies =[
{title: "sksk",
poster: "eff.jpg"
},
{title : "oldboy",
poster : "dd.jpg"
}
…

// array map ㄱ능.  
{movies.map(movie => {
return <Movie title={movie.title} poster={movie.poster} />

-> 
<Movie title={movies[0].title} poster={movies[0].poster} />
… 과 같은

#2-4. Validating Props with PropTypes
key 값 주기 (id) 같은. 그래야 에러발생 NO.

{movies.map((movie, index) => {
return <Movie title={movie.title} poster={movie.poster} key={index} />

//PropTypes 설정하기 : prop로 가져오는 값의 타입을 볼떄. 예상가능. 

import PropTypes from 'prop-types';


Movie 컴포넌트 {
static propTypes = {
	title: PropTypes.string.isRequired,
	poster: PropTypes.string.isRequired
	}
	
	render() {…
	
MoviePoster Component {
static proptype = {
poster : propType.string.isRequired
	
#3-1. Lifecycle Events on React
What is 'Lifecycle' ?
컴포넌트는 여러 기능을 정해진 순서대로 실행함.

Render : componentWillMount() -> render() -> compomentDidmount()

이 과정은 자동실행. console.log로 밑에 메시지를 넣어서 순서 확인 가능


Update componentWillReceiveProps() -> shouldComponentUpdate()->
componentWillUpdate() -> render() ->component
	
#4-1. Thinking in React: Component State
state 만들기
직접 사용은 되지만 그럴 시 오류 발생.!

class App extends Component{
state ={
	greeting : 'Hello'
	}

componentDidMount(){
setTimeout(() => {
	this.setState({
		greeting: 'Hello again'
		})
		}, 2000)
		}
		
		그리고
		return 값에
		return (
		<div className="App">
		{this.state.greeting}
		
		
// 자 Movie에 적용해서 5초후 새로운 영화가 뜨는 법
class App extends Component{
state ={
	greeting : 'Hello'
	movies: [
	{ title: "",
	poster : "",
	} ]
	
	}



componentDidMount(){
	setTimeout(() => {
	this.setState({
	movies: [
	…this.state.movies,
	{title: "Trainss",
	poster: "www...."
	},]
	})
	},5000)
	
	
	#4-3. Loading States
	
	_renderMovies = () => {
	const movies = this.state.movies.map((movie, index) =>{
	return <Movie……key={index} />
	})
	return movies
	}
	
	render(){
	
	{this.state.movies ? this._renderMovies() : 'Loading' }
	
</div>




 #5-1. Smart vs Dumb Components
state 필요성.

smart -> state 있음 dump 없음.
---------------------------------------------


title- title_english  (항목에서 체크하기)
genres,
description- synopsis

img-> medium-cover-image값 가져오기




_renderMovies =() => {
const movies = this.state.movies.map( movie => {
return <Movie title ={movie.title_english} poster={movie.small_cover_image} key{movie.id}
           gentres = {movie.genres} synopsis = {movie.synopsis}


movie.js -> prototype 변경해주기 ( 상세 장르 등 값)

각각 내용 function 기능 만들어 주기(className도 설명)

Function Movie({title, poster, genres, synopsis}){
           re





